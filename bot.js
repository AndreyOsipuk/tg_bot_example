require("dotenv").config({ path: path.join(__dirname, ".env") });
const TelegramBot = require("node-telegram-bot-api");
// const axios = require("axios");

// ENV
const TOKEN = process.env.TELEGRAM_TOKEN;
const BACKEND_URL = process.env.BACKEND_URL || "http://localhost:8000";

console.log("‚ñ∂Ô∏è Starting bot process...");
if (!TOKEN) {
  console.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
  process.exit(1);
}

console.log("üß™ Env loaded. Token length:", TOKEN.length);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞: long polling
const bot = new TelegramBot(TOKEN, { polling: true });

bot.on("polling_error", (err) => {
  console.error("Polling error:", err?.response?.body || err);
});
bot.on("error", (err) => {
  console.error("Bot error:", err);
});

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ø–∏–Ω–≥–∞" ---
bot.onText(/^\/ping$/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã");
});

(async () => {
  try {
    console.log("üîß Deleting webhook (if any)...");
    await bot.deleteWebHook({ drop_pending_updates: true });
    console.log("üîß Webhook deleted (or was not set).");
  } catch (e) {
    console.warn("‚ö†Ô∏è Failed to delete webhook (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω):", e?.message || e);
  }

  try {
    const me = await bot.getMe();
    console.log(`‚úÖ Bot authorized as @${me.username} (id: ${me.id})`);
    console.log("‚è≥ Polling started. Send /ping to your bot in Telegram.");
  } catch (e) {
    console.error("‚ùå getMe() failed ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω:", e?.message || e);
  }
})();

const SUPPORT_MESSAGES = [
  "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
  "–î–∞–∂–µ —Å–∞–º—ã–π —Ç—ë–º–Ω—ã–π —Ç–æ–Ω–Ω–µ–ª—å –∏–º–µ–µ—Ç –≤—ã—Ö–æ–¥.",
  "–¢—ã –≤–∞–∂–µ–Ω. –û—á–µ–Ω—å.",
  "–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä –≤ –ø–æ–ª—å–∑—É –∂–∏–∑–Ω–∏ ‚Äî –∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ.",
  "–¢—ã –Ω–µ –æ–¥–∏–Ω. –ú—ã —Ä—è–¥–æ–º.",
  "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
  "–î—ã—à–∏ –≥–ª—É–±–æ–∫–æ. –í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.",
  "–¢—ã –Ω—É–∂–µ–Ω —ç—Ç–æ–º—É –º–∏—Ä—É.",
  "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ ‚Äî —Ç–æ–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥.",
  "–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã. –ù–µ —Å–∫—Ä—ã–≤–∞–π –∏—Ö.",
  "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –∑–∞–±–æ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
  "–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å —Å–æ–±–æ–π ‚Äî —É–∂–µ –≥–µ—Ä–æ–π—Å—Ç–≤–æ.",
  "–¢–≤–æ—è –∂–∏–∑–Ω—å ‚Äî –±–µ—Å—Ü–µ–Ω–Ω–∞.",
  "–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ.",
  "–ú–∏—Ä —Ü–µ–Ω–∏—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å.",
  "–î–∞–∂–µ –µ—Å–ª–∏ —Ç—è–∂–µ–ª–æ ‚Äî —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü.",
  "–° –∫–∞–∂–¥—ã–º –≤–¥–æ—Ö–æ–º —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∂–∏–∑–Ω—å.",
  "–¢—ã —Å–º–µ–ª—ã–π –∑–∞ —Ç–æ, —á—Ç–æ –∏—â–µ—à—å –ø–æ–º–æ—â—å.",
  "–û–¥–∏–Ω –¥–µ–Ω—å –∑–∞ —Ä–∞–∑. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è.",
  "–õ—é–±–æ–≤—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—è–¥–æ–º ‚Äî –æ—Ç–∫—Ä–æ–π —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ."
];

// –ü—Ä–æ—Å—Ç–∞—è ‚Äú–ø–∞–º—è—Ç—å‚Äù –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å ‚Äî –≤—Å—ë –æ–±–Ω—É–ª—è–µ—Ç—Å—è)
const USER_HISTORY = new Map(); // userId -> [{ text, mood }]
const MENTORS = new Map();      // userId -> mentorId/—Å—Ç—Ä–æ–∫–∞ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
const REMINDERS = new Map();    // userId -> reminder data (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

const THRESHOLD_NEGATIVE = 3;
const LOOKBACK = 5;

function analyzeEmotion(text) {
  const crisisWords = ["–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å", "—Å—É–∏—Ü–∏–¥", "—É–º–µ—Ä–µ—Ç—å", "–ø–æ–∫–æ–Ω—á—É"];
  const negativeWords = ["–≥—Ä—É—Å—Ç—å", "–ø–ª–æ—Ö–æ", "—É—Å—Ç–∞–ª", "–æ–¥–∏–Ω", "–±–æ–ª—å–Ω–æ", "—Å—Ç—Ä–∞—Ö", "—Ç—Ä–µ–≤–æ–≥–∞"];
  const positiveWords = ["—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–ª—é–±–ª—é", "–Ω–∞–¥–µ–∂–¥–∞", "—Å–≤–µ—Ç"];

  const low = (text || "").toLowerCase();
  if (crisisWords.some((w) => low.includes(w))) return "crisis";
  if (negativeWords.some((w) => low.includes(w))) return "negative";
  if (positiveWords.some((w) => low.includes(w))) return "positive";
  return "neutral";
}

function mainKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å ¬´–ü–æ—á–µ–º—É?¬ª", callback_data: "why" }],
        [{ text: "ü§ù –†—É–∫–∞ –ø–æ–º–æ—â–∏", callback_data: "help_hand" }],
        [{ text: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data: "set_reminder" }],
        [{ text: "–ó–∞–¥–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data: "set_mentor" }]
      ]
    },
    parse_mode: "Markdown"
  };
}

// /start
bot.onText(/^\/start$/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(
    chatId,
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç *–ü–æ—á–µ–º—É?*.\n–¢—ã –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    mainKeyboard()
  );
});

// /help
bot.onText(/^\/help$/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(
    chatId,
    "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äì –º–µ–Ω—é\n/help ‚Äì –ø–æ–º–æ—â—å"
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ (inline keyboard)
bot.on("callback_query", async (query) => {
  const { data } = query;
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;

  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (—á—Ç–æ–±—ã –∏—Å—á–µ–∑ ¬´—á–∞—Å–∏–∫¬ª)
  await bot.answerCallbackQuery(query.id).catch(() => {});

//   if (data === "help_hand") {
//     try {
//       const resp = await axios.post(`${BACKEND_URL}/sos/trigger`, { user_id: 1 });
//       if (resp.status === 200) {
//         const message = SUPPORT_MESSAGES[Math.floor(Math.random() * SUPPORT_MESSAGES.length)];
//         await bot.editMessageText(
//           `ü§ù –¢—ã –ø—Ä–æ—Ç—è–Ω—É–ª —Ä—É–∫—É ‚Äî –∏ –ø–æ–º–æ—â—å —É–∂–µ —Ä—è–¥–æ–º.\n\n${message}`,
//           { chat_id: chatId, message_id: messageId }
//         );
//       } else {
//         await bot.editMessageText(
//           "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏.",
//           { chat_id: chatId, message_id: messageId }
//         );
//       }
//     } catch (e) {
//       await bot.editMessageText(
//         `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e?.message || e}`,
//         { chat_id: chatId, message_id: messageId }
//       );
//     }
//     return;
//   }

  if (data === "why") {
    await bot.sendMessage(chatId, "–ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å, *–ø–æ—á–µ–º—É* —Ç—ã —Ç–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å? –ß—Ç–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥—à–µ—Å—Ç–≤–æ–≤–∞–ª–æ?", { parse_mode: "Markdown" });
    return;
  }

  if (data === "set_reminder") {
    await bot.sendMessage(chatId, "–û–∫! –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∞. –ù–∞–ø–∏—à–∏, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é. üìÖ");
    return;
  }

  if (data === "set_mentor") {
    await bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏ –∏–º—è –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞, —è –ø—Ä–∏–≤—è–∂—É –µ–≥–æ –∫ —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. üë§");
    return;
  }

  if (data === "mentor") {
    await bot.sendMessage(chatId, "–ü–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. –ù–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.");
    return;
  }

  if (data === "support") {
    const message = SUPPORT_MESSAGES[Math.floor(Math.random() * SUPPORT_MESSAGES.length)];
    await bot.sendMessage(chatId, `–î–µ—Ä–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n${message}`);
    return;
  }
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ü—Ä–æ–ø—É—Å—Ç–∏–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å '/')
  if (!text || text.startsWith("/")) return;

  const userId = msg.from.id;
  const mood = analyzeEmotion(text);

  const history = USER_HISTORY.get(userId) || [];
  history.push({ text, mood });

  const trimmed = history.slice(-LOOKBACK);
  USER_HISTORY.set(userId, trimmed);

  const negativeCount = trimmed.reduce((acc, m) => acc + (m.mood === "negative" || m.mood === "crisis" ? 1 : 0), 0);

  console.log(negativeCount, THRESHOLD_NEGATIVE)
  if (negativeCount >= THRESHOLD_NEGATIVE) {
    await bot.sendMessage(
      chatId,
      "–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏. –•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É –ø—Ä–æ—Ç—è–Ω—É—Ç—å —Ä—É–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂—É?",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "ü§ù –†—É–∫–∞ –ø–æ–º–æ—â–∏", callback_data: "help_hand" }],
            [{ text: "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º", callback_data: "mentor" }],
            [{ text: "–ü—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: "support" }]
          ]
        }
      }
    );
  }
});